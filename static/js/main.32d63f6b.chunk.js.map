{"version":3,"sources":["context/UserContext.js","utility/ApiClient.js","components/AuthenticationControl.js","components/LogoutButton.js","components/Bundles.js","App.js","serviceWorker.js","index.js"],"names":["UserContext","React","createContext","user","login","logout","AuthenticationControl","props","state","isSignIn","name","email","password","nameError","emailError","passwordError","pending","handleChange","bind","handleSubmit","event","newState","this","target","value","setState","preventDefault","handleSignin","handleSignup","fetch","ApiClient","method","headers","body","JSON","stringify","username","then","response","status","handleError","handleSuccess","catch","error","console","log","finally","json","data","errors","length","forEach","source","pointer","detail","attr","attributes","window","localStorage","setItem","className","undefined","onClick","setSignIn","onSubmit","type","onChange","e","Component","LogoutButton","Bundles","render","authorization_token","authentication_token","Authorization","LoginControl","isLoggedIn","userName","Greeting","UserGreeting","App","auth","getItem","parse","removeItem","Provider","Consumer","context","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.32d63f6b.chunk.js","sourcesContent":["import React from 'react'\n\nexport const UserContext = React.createContext({\n  user: {},\n  login: () => {},\n  logout: () => {}\n}); ","export default {\n    apiRoot: 'https://ancient-plains-38653.herokuapp.com/'\n}","import React from 'react'\nimport ApiClient from '../utility/ApiClient'\n\nexport default class AuthenticationControl extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {  isSignIn: true,\n                      name: '', \n                      email: '', \n                      password: '',\n                      nameError: '', \n                      emailError: '', \n                      passwordError: '',\n                      pending: false \n                    };\n  \n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n  \n    handleChange(name, event) {\n      let newState = this.state\n      newState[name] = event.target.value;\n      this.setState(newState);\n    }\n\n    handleSubmit(event) {\n      event.preventDefault();\n      this.setState({pending: true});\n      if(this.state.isSignIn)\n        this.handleSignin();\n      else\n        this.handleSignup();\n    }\n  \n    handleSignup() {\n      fetch(ApiClient.apiRoot + '/users', \n      { \n        method: 'POST',\n        headers: {\"Content-Type\": \"application/json\"},        \n        body: JSON.stringify({\n          user: {\n            username: this.state.name,\n            email: this.state.email,\n            password: this.state.password\n          }\n        })\n      })\n      .then( (response) => {\n        if( response.status === 422 )\n          this.handleError(response);\n        if( response.status === 201 )\n          this.handleSuccess(response);\n      })\n      .catch(function (error) {\n        console.log(error);\n      })\n      .finally(()=>{this.setState({pending: false});});      \n    }\n\n    handleSignin() {\n      fetch(ApiClient.apiRoot + '/users/sign_in', \n      { \n        method: 'POST',\n        headers: {\"Content-Type\": \"application/json\"},        \n        body: JSON.stringify({\n          user: {\n            email: this.state.email,\n            password: this.state.password\n          }\n        })\n      })\n      .then( (response) => {\n        if( response.status === 422 )\n          this.handleError(response);\n        if( response.status === 201 )\n          this.handleSuccess(response);\n      })\n      .catch(function (error) {\n        console.log(error);\n      })\n      .finally(()=>{this.setState({pending: false});});      \n    }    \n\n    handleError( response ) {\n      response.json().then( data => {\n        let newState = this.state;\n        newState.nameError = '';\n        newState.emailError = '';\n        newState.passwordError = '';\n        if(data.errors.length) {\n          data.errors.forEach( (error) => {\n            if(error.source.pointer === \"/data/attributes/username\")\n              newState.nameError = error.detail;\n            if(error.source.pointer === \"/data/attributes/email\")\n              newState.emailError = error.detail;\n            if(error.source.pointer === \"/data/attributes/password\")\n              newState.passwordError = error.detail;\n          })\n        }\n        this.setState(newState);\n      });\n    }\n\n    handleSuccess( response ) {\n      response.json().then( data => {\n        let attr = data.data.attributes;\n        window.localStorage.setItem('auth', JSON.stringify(attr));    \n        this.props.login();    \n      });\n    }\n\n    setSignIn(isSignIn) {\n      this.setState({isSignIn: isSignIn, nameError: '', emailError: '', passwordError: ''});\n    }\n  \n    render() {\n      return (\n        <div>\n          <div>\n            <div className='session-actions'>\n              <span className={this.state.isSignIn ? 'active' : undefined} onClick={() => this.setSignIn(true)} >Sign In</span>\n              <span className={this.state.isSignIn ? undefined : 'active'} onClick={() => this.setSignIn(false)} >Sign Up</span>\n            </div>          \n          </div>\n\n          <form onSubmit={this.handleSubmit}>\n            <div className='sign-up-container'>\n              <div className={this.state.isSignIn ? 'animate-hide' : 'animate-show'}>\n                <label>Name</label>\n                <input type=\"text\" value={this.state.value} onChange={(e) => this.handleChange('name', e)}/>\n                { this.state.nameError.length > 0  && <div className='error-message'>{ this.state.nameError }</div> }\n              </div>                \n              <label>Email</label>\n              <input type=\"email\" value={this.state.value} onChange={(e) => this.handleChange('email', e)}/>\n              { this.state.emailError.length > 0  && <div className='error-message'>{ this.state.emailError }</div> }              \n              <label>Password</label>\n              <input type=\"password\" value={this.state.value} onChange={(e) => this.handleChange('password', e)}/>\n              { this.state.passwordError.length > 0  && <div className='error-message'>{ this.state.passwordError }</div> }\n              <input type=\"submit\" className=\"submit\" value={this.state.pending ? \"Submitting\" : \"Submit\"} />\n            </div>\n          </form>\n        </div>          \n      );\n    }\n  }","import React from 'react'\n\nexport default class LogoutButton extends React.Component {\n    render(){\n        return (\n            <button onClick={ () => this.props.logout() }>\n                Logout\n            </button>            \n        );\n    }\n}","import React from 'react'\nimport axios from 'axios'\n\nexport default class Bundles extends React.Component {\n    state = {}\n\n    render = () => {\n        if(this.props.user) {\n            const authorization_token = `Token token=${this.props.user.authentication_token}, email=${this.props.user.email}`;\n            console.log(authorization_token);\n            fetch('/bundles', { method: 'get', \n                                headers: { \"Content-Type\": \"application/json\",\n                                            Authorization: authorization_token\n                            }}).then(response => {\n                                console.log(response);\n                            });\n                        }                                \n        return (\n            <div/>\n        )\n    }\n}","import React from 'react';\nimport {UserContext} from './context/UserContext';\nimport AuthenticationControl from './components/AuthenticationControl'\nimport LogoutButton from './components/LogoutButton'\nimport Bundles from './components/Bundles'\nimport './App.css';\n\nclass LoginControl extends React.Component {\n  componentDidMount() {\n    this.props.login();\n  }  \n\n  render() {\n    const isLoggedIn = this.props.user != null;\n    const userName = this.props.user ? this.props.user.username : '';\n\n    return (\n      <div>\n        <Greeting user={userName} />\n        { isLoggedIn && <LogoutButton logout={() => this.props.logout()} />}\n        { !isLoggedIn && <AuthenticationControl login={() => this.props.login()}/> }\n      </div>\n    );\n  }\n}\n\nfunction UserGreeting(props) {\n  return <h1>Welcome back {props.name}!</h1>;\n}\n\nfunction Greeting(props) {\n  if (props.user) {\n    return <UserGreeting name={props.user}/>;\n  }\n  return <div/>;\n}\n\nclass App extends React.Component {\n  state = {};\n\n  login = () => {\n    let newState = this.state;\n    let auth = window.localStorage.getItem('auth');\n    let user = auth ? JSON.parse(auth) : null;\n    newState.user = user;\n    this.setState(newState);\n  }\n\n  logout = () => {\n    window.localStorage.removeItem('auth');\n    let newState = this.state;\n    newState.user = null;\n    this.setState(newState);\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <UserContext.Provider value={{\n          user: this.state.user,\n          login: this.login,\n          logout: this.logout\n        }}>\n          <UserContext.Consumer>\n            {(context) => (\n              <div>\n                <LoginControl user={context.user} login={context.login} logout={context.logout}/>\n                <Bundles user={context.user}/>\n              </div>                \n            )}\n          </UserContext.Consumer>        \n       </UserContext.Provider>\n      </div>       \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}